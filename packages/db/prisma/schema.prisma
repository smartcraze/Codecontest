generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  role        Role
  leaderboard Leaderboard[]
  submissions Submission[]
}

enum Role {
  User
  Admin
}

model Contest {
  id                        String                      @id @default(uuid())
  title                     String
  startTime                 DateTime
  endTime                   DateTime
  leaderboard               Leaderboard[]
  contestToChallengeMapping ContestToChallengeMapping[]
}

model ContestToChallengeMapping {
  id          String       @id @default(uuid())
  contestId   String
  challengeId String
  index       Int
  submissions Submission[]
  contest     Contest      @relation(fields: [contestId], references: [id])
  challenge   Challenge    @relation(fields: [challengeId], references: [id])

  @@unique([contestId, challengeId])
}

model Challenge {
  id                        String                      @id @default(uuid())
  title                     String
  notionDocId               String                      @unique
  contentMd                 String
  lastSyncedAt              DateTime?
  maxPoints                 Int
  difficulty                Difficulty
  contestToChallengeMapping ContestToChallengeMapping[]
}

model Submission {
  id                          String           @id @default(uuid())
  code                        String
  contestToChallengeMappingId String
  userId                      String
  points                      Int              @default(0)
  status                      SubmissionStatus @default(PENDING)
  feedback                    String?
  createdAt                   DateTime         @default(now())

  user                      User                      @relation(fields: [userId], references: [id])
  contestToChallengeMapping ContestToChallengeMapping @relation(fields: [contestToChallengeMappingId], references: [id])
  evaluations               EvaluationResult[]

  @@index([userId, contestToChallengeMappingId])
}

model EvaluationResult {
  id           String     @id @default(uuid())
  submissionId String
  input        String
  expected     String
  actual       String
  passed       Boolean
  submission   Submission @relation(fields: [submissionId], references: [id])
}

enum SubmissionStatus {
  PENDING
  EVALUATED
  FAILED
}

model Leaderboard {
  id        String  @id @default(uuid())
  contestId String
  userId    String
  rank      Int
  contest   Contest @relation(fields: [contestId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([contestId, rank])
}

enum Difficulty {
  Easy
  Medium
  Hard
}
